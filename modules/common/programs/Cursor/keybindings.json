[
  {
    "key": "ctrl+p",
    "command": "workbench.action.quickOpen"
  },
  {
    "key": "ctrl+shift+p",
    "command": "workbench.action.showCommands"
  },
  {
    "key": "ctrl+s",
    "command": "workbench.action.files.save"
  },
  {
    "key": "ctrl+shift+s",
    "command": "workbench.action.files.saveAll"
  },
  {
    "key": "cmd+.",
    "command": "editor.action.goToDeclaration",
    "when": "isMac"
  },
  {
    "key": "alt+.",
    "command": "editor.action.goToDeclaration",
    "when": "isLinux"
  },
  {
    "key": "cmd+,",
    "command": "workbench.action.navigateBack",
    "when": "isMac"
  },
  {
    "key": "alt+,",
    "command": "workbench.action.navigateBack",
    "when": "isLinux"
  },
  {
    "key": "cmd+shift+.",
    "command": "editor.action.goToReferences",
    "when": "isMac"
  },
  {
    "key": "alt+shift+.",
    "command": "editor.action.goToReferences",
    "when": "isLinux"
  },
  {
    "key": "cmd+ctrl+.",
    "command": "editor.action.quickFix",
    "when": "isMac && editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+ctrl+.",
    "command": "editor.action.quickFix",
    "when": "isLinux && editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "cmd+;",
    "command": "workbench.action.navigateBack",
    "when": "isMac && canNavigateBack"
  },
  {
    "key": "alt+;",
    "command": "workbench.action.navigateBack",
    "when": "isLinux && canNavigateBack"
  },
  {
    "key": "cmd+'",
    "command": "workbench.action.navigateForward",
    "when": "isMac && canNavigateForward"
  },
  {
    "key": "alt+'",
    "command": "workbench.action.navigateForward",
    "when": "isLinux && canNavigateForward"
  },
  {
    "key": "ctrl+w",
    "command": "workbench.action.closeActiveEditor"
  },
  {
    "key": "ctrl+shift+w",
    "command": "workbench.action.closeGroup"
  },
  {
    "key": "ctrl+o",
    "command": "workbench.action.focusNextGroup"
  },
  {
    "key": "ctrl+shift+cmd+o",
    "command": "workbench.action.moveEditorToNextGroup",
    "when": "isMac && !activeEditorGroupLast"
  },
  {
    "key": "ctrl+shift+cmd+o",
    "command": "workbench.action.moveEditorToFirstGroup",
    "when": "isMac && activeEditorGroupLast"
  },
  {
    "key": "ctrl+shift+alt+o",
    "command": "workbench.action.moveEditorToNextGroup",
    "when": "isLinux && !activeEditorGroupLast"
  },
  {
    "key": "ctrl+shift+alt+o",
    "command": "workbench.action.moveEditorToFirstGroup",
    "when": "isLinux && activeEditorGroupLast"
  },
  {
    "key": "ctrl+shift+cmd+.",
    "command": "editor.action.smartSelect.expand",
    "when": "isMac"
  },
  {
    "key": "ctrl+shift+alt+.",
    "command": "editor.action.smartSelect.expand",
    "when": "isLinux"
  },
  {
    "key": "ctrl+shift+cmd+,",
    "command": "editor.action.smartSelect.shrink",
    "when": "isMac"
  },
  {
    "key": "ctrl+shift+alt+,",
    "command": "editor.action.smartSelect.shrink",
    "when": "isLinux"
  },
  {
    "key": "ctrl+shift+cmd+'",
    "command": "editor.action.selectToBracket",
    "when": "isMac"
  },
  {
    "key": "ctrl+shift+alt+'",
    "command": "editor.action.selectToBracket",
    "when": "isLinux"
  },
  {
    "key": "cmd+ctrl+shift+r",
    "command": "workbench.action.reloadWindow",
    "when": "isMac"
  },
  {
    "key": "alt+ctrl+shift+r",
    "command": "workbench.action.reloadWindow",
    "when": "isLinux"
  },
  {
    "key": "cmd+alt+p",
    "command": "workbench.actions.view.toggleProblems"
  },
  {
    "key": "cmd+alt+e",
    "command": "workbench.view.explorer",
    "when": "viewContainer.workbench.view.explorer.enabled"
  },
  {
    "key": "cmd+alt+s",
    "command": "workbench.view.scm",
    "when": "viewContainer.workbench.view.scm.enabled"
  },
  {
    "key": "cmd+alt+t",
    "command": "workbench.view.testing.focus"
  },
  {
    "key": "cmd+alt+x",
    "command": "workbench.view.extensions"
  },
  {
    "key": "cmd+alt+[",
    "command": "workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "cmd+alt+]",
    "command": "workbench.action.toggleAuxiliaryBar"
  },
  {
    "key": "cmd+alt+'",
    "command": "workbench.action.togglePanel"
  },
  {
    "key": "cmd+alt+;",
    "command": "workbench.action.toggleMaximizedPanel"
  },
  {
    "key": "ctrl+;",
    "command": "workbench.action.previousEditorInGroup"
  },
  {
    "key": "ctrl+'",
    "command": "workbench.action.nextEditorInGroup"
  },
  {
    "key": "ctrl+shift+;",
    "command": "workbench.action.moveEditorLeftInGroup"
  },
  {
    "key": "ctrl+shift+'",
    "command": "workbench.action.moveEditorRightInGroup"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+e",
    "command": "workbench.action.focusActiveEditorGroup"
  },
  {
    "key": "ctrl+shift+alt+[",
    "command": "workbench.action.focusPreviousPart"
  },
  {
    "key": "ctrl+shift+alt+]",
    "command": "workbench.action.focusNextPart"
  },
  {
    "key": "ctrl+alt+=",
    "command": "workbench.action.increaseViewSize"
  },
  {
    "key": "ctrl+alt+-",
    "command": "workbench.action.decreaseViewSize"
  },
  {
    "key": "ctrl+j",
    "command": "search.action.focusNextSearchResult",
    "when": "searchViewletVisible"
  },
  {
    "key": "ctrl+k",
    "command": "search.action.focusPreviousSearchResult",
    "when": "searchViewletVisible"
  },
  {
    "key": "ctrl+shift+t",
    "command": "workbench.action.reopenClosedEditor"
  },
  {
    "key": "j",
    "command": "list.focusDown",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "k",
    "command": "list.focusUp",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+.",
    "command": "editor.action.marker.next"
  },
  {
    "key": "ctrl+,",
    "command": "editor.action.marker.prev"
  },
  {
    "key": "ctrl+]",
    "command": "paredit.sexpRangeExpansion",
    "when": "editorLangId == 'clojure'"
  },
  {
    "key": "ctrl+[",
    "command": "paredit.sexpRangeContraction",
    "when": "editorLangId == 'clojure'"
  },
  {
    "key": "alt+\\",
    "command": "joyride.runUserScript",
    "args": "ignore_form.cljs",
    "when": "editorLangId == 'clojure'"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.terminal.clear",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+k",
    "command": "aipopup.action.modal.generate",
    "when": "editorFocus",
    "args": { "invocationType": "new" }
  },
  {
    "key": "ctrl+up",
    "command": "calva.showPreviousReplHistoryEntry",
    "when": "editorLangId == 'clojure' && editorTextFocus && resourceFilename =~ /\\.calva-repl$/"
  },
  {
    "key": "ctrl+down",
    "command": "calva.showNextReplHistoryEntry",
    "when": "editorLangId == 'clojure' && editorTextFocus && resourceFilename =~ /\\.calva-repl$/"
  },
  {
    "key": "ctrl+backspace",
    "command": "paredit.killSexpBackward",
    "when": "editorLangId == 'clojure' && editorTextFocus"
  },
  {
    "key": "ctrl+cmd+k",
    "command": "paredit.killSexpForward",
    "when": "isMac && editorLangId == 'clojure' && editorTextFocus"
  },
  {
    "key": "ctrl+alt+k",
    "command": "paredit.killSexpForward",
    "when": "isLinux && editorLangId == 'clojure' && editorTextFocus"
  },
  {
    "key": "cmd+ctrl+shift+f",
    "command": "editor.action.formatDocument",
    "when": "isMac && editorFocus"
  },
  {
    "key": "alt+ctrl+shift+f",
    "command": "editor.action.formatDocument",
    "when": "isLinux && editorFocus"
  },
  {
    "key": "cmd+i",
    "command": "composerMode.agent"
  },
  {
    "key": "ctrl+i",
    "command": "composerMode.agent"
  }
]
